// * Calculate rem (root em) units from pixels for font-size and line-height
@mixin font-size($font-size, $line-height: '') {
  @if $font-size == 'inherit' {
    @error 'No inherit values allowed in font-size mixin!';
  } @else if unit($font-size) == 'rem' {
    font-size: $font-size;
  } @else {
    font-size: ($font-size / $base-font-size) * 1rem;
  }

  // Handle the line-height
  @if $line-height != '' {
    // Check if line-height is in px
    @if unit($line-height) == 'px' {
      line-height: ($line-height / $base-font-size) * 1rem;
    } @else {
      // Check if line-height is in rem and handle the line-height
      @if unit($line-height) == 'rem' {
        line-height: $line-height;
      }
      // The line-height is a multiplier
      @else {
        $font-size-px: nounit($font-size);
        $base-font-size-px: nounit($base-font-size);

        // Convert the font-size if it is in rem
        @if unit($font-size) == 'rem' {
          $font-size-px: nounit($font-size) * nounit($base-font-size);
        }

        $conversion: $base-font-size-px *
          ($font-size-px / $base-font-size-px) *
          $line-height /
          $base-font-size-px;
        line-height: #{$conversion}rem;
      }
    }
  }
}

// * Count content
@mixin content_count($number_of_items...) {
  @each $item in $number_of_items {
    @if type-of($item) == number {
      @for $i from 1 through $item {
        &:nth-child(#{$i}):nth-last-child(#{$item - $i + 1}) {
          @content;
        }
      }
    }
  }
}

// * Transitions
@mixin transition-ease {
  transition: all 0.5s ease-in-out;
}

// * Set text color
@function set-text-color($color) {
  @if (lightness($color) > 40%) {
    @return #000;
  } @else {
    @return #fff;
  }
}
